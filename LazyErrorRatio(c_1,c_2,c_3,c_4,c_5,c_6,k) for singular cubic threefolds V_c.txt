# Input: a 5-variable cubic form F in R = PolynomialRing(k, 5, 'x_1,x_2,x_3,x_4,x_5')
# with F defined over a finite field k = GF(q,'a').
# Output: the number E_X(q)/q, where X := V(F).

def LazyErrorCount(F,k):
    q_size = k.order()
    R = PolynomialRing(k, 5, 'x_1,x_2,x_3,x_4,x_5');
#     Even though
#     print(F)
#     makes sense, we still need to "internally" specify the local/mutable variables x_i:
#     https://ask.sagemath.org/question/49283/localglobal-variable-behaviour-of-lists/
    x_1, x_2, x_3, x_4, x_5 = R.gens()
#     Next, we replace F with its "SAGE coercion" in R (if possible; otherwise an error will arise).
    F = R(F);
    lazy_point_count = 0
    P.<t_1,t_2,t_3,t_4,t_5> = ProjectiveSpace(4,k)
    for p in P.rational_points():
#         https://doc.sagemath.org/html/en/reference/schemes/sage/schemes/projective/projective_space.html
        if F(p[0],p[1],p[2],p[3],p[4]) == 0:
            lazy_point_count += 1;
    E_X = lazy_point_count - (q_size^3 + q_size^2 + q_size + 1)
    return E_X

# Input: the cubic threefold X (use homogeneous 5-variable cubic polynomial F below), an odd prime power q
# Output: the number E_c(q)/q

def LazyErrorRatio(c_1,c_2,c_3,c_4,c_5,c_6,k):
    q = k.order()
    R = PolynomialRing(k, 5, 'x_1,x_2,x_3,x_4,x_5')
    x_1, x_2, x_3, x_4, x_5 = R.gens()
    S = PolynomialRing(R, 1, 'x_6')
    x_6 = S.gen()
#     We are interested in x_1^3+...+x_6^3 = c_1x_1+...+c_6x_6=0.
#     If c_6 != 0, we can do a speedup, reducing to 5 variables using the linear equation.
    if c_6 != 0:
        F_gen = (c_6^3*(x_1^3 + x_2^3 + x_3^3 + x_4^3 + x_5^3)
                  - (c_1*x_1 + c_2*x_2 + c_3*x_3 + c_4*x_4 + c_5*x_5)^3);
        E_c = LazyErrorCount(F_gen,k);
        return E_c/q

#     In general, we will count points the laziest way possible.
    F = x_1^3 + x_2^3 + x_3^3 + x_4^3 + x_5^3 + x_6^3
    H = c_1*x_1 + c_2*x_2 + c_3*x_3 + c_4*x_4 + c_5*x_5 + c_6*x_6
    lazy_point_count = 0
    P.<t_1,t_2,t_3,t_4,t_5,t_6> = ProjectiveSpace(5,k)
    for p in P.rational_points():
#         https://doc.sagemath.org/html/en/reference/schemes/sage/schemes/projective/projective_space.html
        if F(p[5])(p[0],p[1],p[2],p[3],p[4]) == H(p[5])(p[0],p[1],p[2],p[3],p[4]) == 0:
            lazy_point_count += 1

    E_c = lazy_point_count - (q^3 + q^2 + q + 1)
    return E_c/q
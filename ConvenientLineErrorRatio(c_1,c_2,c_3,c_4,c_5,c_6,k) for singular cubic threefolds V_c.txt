# Based in part on https://github.com/alaface/CubLin
# However, we allow singular X, and
# we will specifically use a line L through as many singularities of X as possible.
# Input: a singular projective cubic threefold X = V_c/F_q
# with q an odd prime power q.
# Output: a power q_new of q, and the number E_c(q_new)/q_new,
# as well as "printed" information that may rigorously prove that X is "good".

# Load AbsFactorType(P_given, multiplicity, k_given)

# Load StdConicBundleErrorCount(F_std, k_given)

---

# R = PolynomialRing(QQ, 5, 'x_1,x_2,x_3,x_4,x_5')
# x_1, x_2, x_3, x_4, x_5 = R.gens();
# F = x_1^3+x_2^3+x_3^3+x_4^3+x_5^3
# v = vector(QQ, [1,1,1,1,1])
# print(v)
# print(F([1,1,1,1,1]))
# print(F.gradient()[0]([1,1,1,1,1]))
# print(F(x_1+x_2,x_1,x_3,x_4,x_5))

# k = GF(11)
# R_5 = PolynomialRing(k, 'x_5'); x_5 = R_5.gen()
# R = PolynomialRing(R_5, 4, 'x_1,x_2,x_3,x_4'); x_1, x_2, x_3, x_4 = R.gens()
# F = x_5^3; print(parent(F))
# R_sym = PolynomialRing(k, 5, 'x_1,x_2,x_3,x_4,x_5'); print(R_sym.gens())
# x_1, x_2, x_3, x_4, x_5 = R_sym.gens()
# R_sym(F*x_1^3)
# # print(R.gens())
# # R(F*x_1^3)
# R_small = R_sym.remove_var(x_1,x_2,x_3,x_4); print(R_sym, R_small)

def ConvenientLineErrorRatio(c_1,c_2,c_3,c_4,c_5,c_6,k):
    q = k.order()
    c = [k(c_1/c_6), k(c_2/c_6), k(c_3/c_6), k(c_4/c_6), k(c_5/c_6), k(c_6/c_6)]
#     Implicitly we assume c_6 != 0, and then renormalize c_6 to c[5] = 1.
    K = k.extension(2); s = []; Sings = []
    if all(c[i].is_square() for i in range(len(c))):
        k_new = k
    else:
        k_new = K
    q_new = k_new.order()
    for i in range(6):
        s.append(k_new(c[i]).sqrt())
    for j in cartesian_product([[-1,1],[-1,1],[-1,1],[-1,1],[-1,1],[1]]):
        if not(all(j[i] == 1 or s[i] != 0 for i in range(5))):
            continue # This ensures we don't double count from c_i=0's.
        if sum(j[i]*s[i]^3 for i in range(6)) == k_new(0):
            Sings.append([j[i]*s[i] for i in range(5)])

    R_sym = PolynomialRing(k_new, 5, 'x_1,x_2,x_3,x_4,x_5'); # print(R_sym)
    x_1, x_2, x_3, x_4, x_5 = R_sym.gens()
    R_small = R_sym.remove_var(x_1,x_2,x_3,x_4); # print(R_small)
#     https://doc.sagemath.org/html/en/reference/polynomial_rings/sage/rings/polynomial/multi_polynomial_ring_base.html
    x_6 = -(c[0]*x_1 + c[1]*x_2 + c[2]*x_3 + c[3]*x_4 + c[4]*x_5)
    F = x_1^3+x_2^3+x_3^3+x_4^3+x_5^3+x_6^3; # print(parent(F))

    ConvenientPts = []; V = VectorSpace(k_new, 5); ConvenientBasis = []
#     https://doc.sagemath.org/html/en/constructions/linear_algebra.html
    if len(Sings) == 0:
        return "#Sings = 0; abort. Use CleanLine instead."
    if len(Sings) >= 2:
        ConvenientPts.extend([V(Sings[0]), V(Sings[1])])
    if len(Sings) == 1:
        u = Sings[0]
        if c[0] == c[1] == 0:
            t = [1, -1, u[2], u[3], u[4]]; print(F(t), sum(u[i]*F.gradient()[i](t) for i in range(5)))
            ConvenientPts.extend([V(u), V(t)])
        for tries in range(10*q_new):
            if len(ConvenientPts) == 2:
                break
            t = [1, k_new.random_element(), k_new.random_element(), k_new.random_element(), x_5]
#             We are not using the t[0] = 0 locus, but this shouldn't matter...
            univar = R_small(F(t)); L = univar.roots()
            if len(L) == 0:
                continue
            t[4] = L[0][0]
            if all(t[i[0]]*u[i[1]] == t[i[1]]*u[i[0]] for i in cartesian_product([range(5), range(5)])):
                continue
            if sum(u[i]*F.gradient()[i](t) for i in range(5)) == 0:
                ConvenientPts.extend([V(u), V(t)])
        if len(ConvenientPts) < 2:
            return "#Sings = 1; algorithm did not find a convenient line over k_new; abort."
#     https://ask.sagemath.org/question/32607/can-sage-extend-bases/
    print("ConvenientPts chosen =", ConvenientPts,
          "where", k_new.gen(), "has minpoly", k_new.gen().minimal_polynomial())
    for v in V.basis():
        if v not in span(ConvenientPts):
            ConvenientPts.append(v); ConvenientBasis.append(v)
    ConvenientBasis.extend([ConvenientPts[0], ConvenientPts[1]])
    T = matrix(R_sym, ConvenientBasis).transpose(); v = vector(R_sym, [x_1, x_2, x_3, x_4, x_5])
    print("Transformation matrix T =", T)
    print("T*[x_1,...,x_5] =", [(T*v)[i] for i in range(5)])
    F_new = F([(T*v)[i] for i in range(5)])
    print("F_new =", F_new)

    E_c = StdConicBundleErrorCount(F_new, k_new)
    if (E_c in IntegerRing()):
        return (q_new, E_c/q_new)
    else:
        return (q_new, E_c)

---

q = 997;
k = GF(q, 'a')
c = [0, 0, 636, 767, 382, 961]
print("Hyperplane section:", c, "over", k)
E_c_ratio = ConvenientLineErrorRatio(c[0],c[1],c[2],c[3],c[4],c[5],k)
print("with (q_new, E_c(q_new)/q_new) =", E_c_ratio, '\n')

yields

Hyperplane section: [0, 0, 636, 767, 382, 961] over Finite Field of size 997
ConvenientPts chosen = [(0, 0, 834, 130, 783), (1, 734, 458, 346, 230)] where 1 has minpoly x + 996
Transformation matrix T = [   1    0    0    0    1]
[   0    1    0    0 -263]
[   0    0    1 -163  458]
[   0    0    0  130  346]
[   0    0    0 -214  230]
T*[x_1,...,x_5] = [x_1 + x_5, x_2 - 263*x_5, x_3 - 163*x_4 + 458*x_5, 130*x_4 + 346*x_5, -214*x_4 + 230*x_5]
F_new = x_1^3 + x_2^3 + 13*x_3^3 + 115*x_3^2*x_4 + 3*x_1^2*x_5 + 208*x_2^2*x_5 + 253*x_3^2*x_5 + 110*x_3*x_4*x_5 + 3*x_1*x_5^2 + 131*x_2*x_5^2 + 169*x_3*x_5^2
det(M) factors absolutely as ([(x_3, 2), (x_1^3 + x_2^3 - 411*x_1^2*x_3 + 417*x_2^2*x_3 + 475*x_1*x_3^2 + 137*x_2*x_3^2 - 246*x_3^3, 1)], 'defined over GF(-):', [(997, 1, x + 996), (997, 1, x + 996)])
with (q_new, E_c(q_new)/q_new) = (997, -120) 